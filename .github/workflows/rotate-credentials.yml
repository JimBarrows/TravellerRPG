name: Rotate AWS Credentials

on:
  schedule:
    # Run on the first day of every month at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:

jobs:
  rotate-credentials:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Rotate access keys
        id: rotate
        run: |
          # Get current user
          USER_NAME=$(aws iam get-user --query 'User.UserName' --output text)
          echo "Rotating keys for user: $USER_NAME"
          
          # List current access keys
          CURRENT_KEYS=$(aws iam list-access-keys --user-name $USER_NAME --query 'AccessKeyMetadata[].AccessKeyId' --output json)
          echo "Current keys: $CURRENT_KEYS"
          
          # Create new access key
          NEW_KEY=$(aws iam create-access-key --user-name $USER_NAME --output json)
          NEW_ACCESS_KEY_ID=$(echo $NEW_KEY | jq -r '.AccessKey.AccessKeyId')
          NEW_SECRET_ACCESS_KEY=$(echo $NEW_KEY | jq -r '.AccessKey.SecretAccessKey')
          
          echo "::add-mask::$NEW_ACCESS_KEY_ID"
          echo "::add-mask::$NEW_SECRET_ACCESS_KEY"
          
          echo "new-access-key-id=$NEW_ACCESS_KEY_ID" >> $GITHUB_OUTPUT
          echo "new-secret-access-key=$NEW_SECRET_ACCESS_KEY" >> $GITHUB_OUTPUT
          
          # Wait for new key to be active
          sleep 10
          
          # Delete old access key (keep the newest one)
          OLD_KEY=$(echo $CURRENT_KEYS | jq -r '.[0]')
          if [ ! -z "$OLD_KEY" ] && [ "$OLD_KEY" != "null" ]; then
            echo "Deleting old key: $OLD_KEY"
            aws iam delete-access-key --user-name $USER_NAME --access-key-id $OLD_KEY
          fi
      
      - name: Update GitHub secrets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          script: |
            const sodium = require('tweetsodium');
            
            // Get public key for secret encryption
            const { data: key } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // Encrypt new credentials
            const encryptSecret = (secret) => {
              const messageBytes = Buffer.from(secret);
              const keyBytes = Buffer.from(key.key, 'base64');
              const encryptedBytes = sodium.seal(messageBytes, keyBytes);
              return Buffer.from(encryptedBytes).toString('base64');
            };
            
            // Update AWS_ACCESS_KEY_ID
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'AWS_ACCESS_KEY_ID',
              encrypted_value: encryptSecret('${{ steps.rotate.outputs.new-access-key-id }}'),
              key_id: key.key_id,
            });
            
            // Update AWS_SECRET_ACCESS_KEY
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'AWS_SECRET_ACCESS_KEY',
              encrypted_value: encryptSecret('${{ steps.rotate.outputs.new-secret-access-key }}'),
              key_id: key.key_id,
            });
            
            console.log('✅ GitHub secrets updated successfully');
      
      - name: Test new credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.rotate.outputs.new-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.rotate.outputs.new-secret-access-key }}
        run: |
          # Test the new credentials
          aws sts get-caller-identity
          echo "✅ New credentials are working"
      
      - name: Send notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ AWS credentials rotated successfully"
            # Add Slack/email notification here
          else
            echo "❌ AWS credential rotation failed"
            # Add alert notification here
          fi