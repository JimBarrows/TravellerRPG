name: Deploy Infrastructure and Applications

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18.x'
  JAVA_VERSION: '21'

jobs:
  # Validate and test infrastructure code
  validate-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint --if-present
        
      - name: Run tests
        run: npm test --if-present
        
      - name: TypeScript type checking
        run: npx tsc --noEmit
        
      - name: CDK Synth
        run: npm run cdk synth
        
      - name: Upload CDK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cdk-out
          path: infrastructure/cdk.out
          retention-days: 7

  # Validate and test Spring Boot API
  validate-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run tests
        run: ./gradlew test
        
      - name: Build application
        run: ./gradlew build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-jar
          path: api/build/libs/*.jar
          retention-days: 7

  # Validate and test React application
  validate-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui-player
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui-player/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint --if-present
        
      - name: Run tests
        run: npm test --if-present -- --watchAll=false
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: ui-player/dist
          retention-days: 7

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, validate-api, validate-web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Determine deployment environment
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      should-deploy: ${{ steps.determine.outputs.should-deploy }}
    
    steps:
      - name: Determine environment
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Deploy infrastructure
  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, security-scan, determine-environment]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy CDK Stack
        run: |
          npm run cdk deploy -- \
            --all \
            --require-approval never \
            --context environment=${{ needs.determine-environment.outputs.environment }}
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

  # Deploy API to Lambda
  deploy-api:
    runs-on: ubuntu-latest
    needs: [validate-api, deploy-infrastructure, determine-environment]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download API artifacts
        uses: actions/download-artifact@v5
        with:
          name: api-jar
          path: ./api-artifacts
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to Lambda
        run: |
          # Package and deploy the Spring Boot application to Lambda
          aws lambda update-function-code \
            --function-name TravellerRPG-${{ needs.determine-environment.outputs.environment }}-api \
            --zip-file fileb://api-artifacts/*.jar \
            --region ${{ env.AWS_REGION }}

  # Deploy web application to S3/CloudFront
  deploy-web:
    runs-on: ubuntu-latest
    needs: [validate-web, deploy-infrastructure, determine-environment]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download web artifacts
        uses: actions/download-artifact@v5
        with:
          name: web-dist
          path: ./web-dist
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to S3
        run: |
          aws s3 sync ./web-dist s3://travellerrpg-${{ needs.determine-environment.outputs.environment }}-web-assets \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"
          
          aws s3 cp ./web-dist/index.html s3://travellerrpg-${{ needs.determine-environment.outputs.environment }}-web-assets/index.html \
            --cache-control "no-cache, no-store, must-revalidate"
      
      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='TravellerRPG-${{ needs.determine-environment.outputs.environment }}-distribution'].Id" \
            --output text)
          
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          fi

  # Run integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run integration tests
        run: |
          # Add integration test commands here
          echo "Running integration tests against ${{ needs.determine-environment.outputs.environment }} environment"
        env:
          TEST_API_URL: ${{ secrets.API_URL }}
          TEST_WEB_URL: ${{ secrets.WEB_URL }}

  # Notify deployment status
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    
    steps:
      - name: Notify success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/Discord/Email notification here
          
      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add Slack/Discord/Email notification here